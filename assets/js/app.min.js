"use strict";

angular.module("marvelApi", ["ui.router", "ngAnimate"]);
"use strict";

angular.module("marvelApi").constant("env", {
  apiUrl: "https://gateway.marvel.com:443/v1/public"
});
"use strict";

angular.module("marvelApi").config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
  $stateProvider.state("home", {
    url: "/home",
    templateUrl: "public/home/home.template.html"
  }).state("details", {
    url: "/details/:characterId",
    templateUrl: "public/character-details-container/characterDetailsContainer.html",
    params: {
      characterId: null
    }
  });
  $urlRouterProvider.otherwise("/home");
}]);
"use strict";

angular.module("marvelApi").controller("CharacterDetailsController", ["$stateParams", "CharactersService", CharacterDetailsController]);

function CharacterDetailsController($stateParams) {
  var vm = this;
  vm.characterId = $stateParams.characterId;
  vm.details = [];
  // vm.comic = [];
  // vm.series = [];
  // vm.story = [];
  vm.offset = 0;
  vm.limit = 20;

  vm.getDetails = function () {
    CharactersService.getAllDetails(vm.characterId, vm.offset, vm.limit).then(function (response) {
      vm.details = response.data.data.results;
    }).catch(function (error) {
      console.log(error);
    });
  };

  vm.seeDetails = function (details) {
    console.log("Informação", details);
  };

  vm.seeMore = function () {
    vm.offset += vm.limit;
    vm.getDetails();
  };

  console.log("CharacterDetailsController", vm.characterId);
  console.log("CharacterDetailsController", vm.getDetails);
  console.log("Não concluir o codigo. Mas se me derem uma chance, posso mostra que sou capaz para ficar na vaga");
}
"use strict";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

angular.module("marvelApi").controller("HomeController", ["CharactersService", "$state", HomeController]);

function HomeController(charactersService, $state) {
    var vm = this;
    vm.characters = [];
    vm.searchName = "";
    vm.offset = 0;

    vm.limits = [5, 10, 20];
    vm.limit = vm.limits[2];

    vm.totalItems = 0;

    vm.search = function () {
        vm.offset = 0;
        vm.getCharacters(true);
        window.scrollTo({
            top: 0,
            behavior: "smooth"
        });
    };

    vm.getCharacters = function (reset) {
        charactersService.getAllCharacters(vm.searchName, vm.offset, vm.limit).then(function (response) {
            vm.totalItems = response.data.data.total;
            if (reset) {
                vm.characters = response.data.data.results;
            } else {
                vm.characters = [].concat(_toConsumableArray(vm.characters), _toConsumableArray(response.data.data.results));
            }
        }).catch(function (error) {
            console.log(error);
        });
    };

    // vm.nextPage = () => {
    //     // implementar as funções nextPage e backPage
    // }

    vm.seeDetails = function (character) {
        console.log("Informação", character);
        $state.go("details", { characterId: character.id });
    };

    vm.switchLimit = function (limit) {
        vm.limit = limit;
    };

    vm.seeMore = function () {
        vm.offset += vm.limit;
        vm.getCharacters();
    };

    vm.init = function () {
        vm.getCharacters();
    };

    vm.init();
};
"use strict";

angular.module("marvelApi").service("CharactersService", function ($http, env) {
  this.getAllCharacters = function (name, offset, limit) {
    var params = {
      apikey: "5a237863b3cc2061003cbbc4fe20dc06",
      hash: "df11c785e5b6ed36060bbd8a36919508",
      ts: 2,
      offset: offset,
      limit: limit
    };

    if (name != null && name != "" && name != undefined) {
      params["nameStartsWith"] = name;
    }

    return $http.get(env.apiUrl + "/characters", {
      params: params
    });
  };

  this.getAllDetails = function (id, offset, limit) {
    var params = {
      apikey: "5a237863b3cc2061003cbbc4fe20dc06",
      hash: "df11c785e5b6ed36060bbd8a36919508",
      ts: 2,
      offset: offset,
      limit: limit
    };

    if (dd != null && id != "" && id != undefined) {
      params["id"] = id;
    }

    return $http.get(env.apiUrl + "/characters/" + id, {
      params: params
    });
  };
});
"use strict";

angular.module("marvelApi").component("limitCharacter", {
    bindings: {
        buttonLimit: "&",
        limit: "<"
    },

    templateUrl: "public/features/characters/components/limit-character/limitCharacter.html",
    controller: function controller() {},
    controllerAs: "ctrl"
});
"use strict";

angular.module('marvelApi').component("listCharacterItem", {
    bindings: {
        character: "<",
        seeDetails: "&"
    },

    templateUrl: "public/features/characters/components/list-character-item/listCharacters.html",
    controller: function controller() {},
    controllerAs: "ctrl"
});
"use strict";

angular.module("marvelApi").component("searchCharacter", {
    bindings: {
        searchName: '=',
        search: '&'
    },

    templateUrl: "public/features/characters/components/search-character/searchCharacter.html",
    controller: function controller() {},
    controllerAs: "ctrl"
});
"use strict";

angular.module("marvelApi").factory("Interceptor", ["$q", Interceptor]);
function Interceptor($q) {
  return {
    responseError: function responseError(error) {
      if (error.status === 400) {
        console.log(error);
      } else if (error.status == -1) {
        alert("Servico indisponivel");
      }
      return $q.reject(error);
    }
  };
}
"use strict";

angular.module("marvelApi").filter("status", function () {
  return function (value, param) {
    if (value === 0) {
      return "(" + param + ") inativo";
    }
    return "(" + param + ") ativo";
  };
});